{"version":3,"sources":["reagent/impl/template.cljs"],"mappings":"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","names":["reagent.impl.template/re-tag","this__4450__auto__","writer__4451__auto__","opt__4452__auto__","cljs.core/-write","reagent.impl.template/NativeWrapper","reagent.impl.template/->NativeWrapper","reagent.impl.template/named?","x","cljs.core/Keyword","cljs.core/Symbol","reagent.impl.template/hiccup-tag?","reagent.impl.template/valid-tag?","cljs.core/ifn?","reagent.impl.template/prop-name-cache","reagent.impl.template/cache-get","o","k","reagent.impl.template/cached-prop-name","temp__5755__auto__","k'","cljs.core/name","reagent.impl.util/dash-to-camel","reagent.impl.template/js-val?","goog/typeOf","reagent.impl.template/kv-conv","v","G__38393","reagent.impl.template/convert-prop-value","cljs.core/map?","cljs.core/reduce-kv","cljs.core/coll?","cljs.core/clj->js","args","cljs.core.apply","reagent.impl.template/oset","G__38394","reagent.impl.template/oget","reagent.impl.template/set-id-class","p","id-class","id","class","old","p__38399","map__38400","cljs.core/--destructure-map","cljs.core.get","reagent.impl.template/stringify-class","props","cljs.core.filter","cljs.core/identity","clojure.string.join","cljs.core.assoc","reagent.impl.template/convert-props","js/reagent","js/reagent.impl","js/reagent.impl.template","js/reagent.impl.template.find-dom-node","reagent.impl.template/find-dom-node","reagent.impl.template/these-inputs-have-selection-api","reagent.impl.template/has-selection-api?","input-type","cljs.core/contains?","p__38401","map__38402","reagent.impl.template/input-node-set-value","node","rendered-value","dom-value","component","on-write","js/document","cljs.core/fn?","node-value","cljs.core.not_EQ_","reagent.impl.batching/do-after-render","reagent.impl.template/input-component-set-value","existing-offset-from-end","cljs.core/count","new-cursor-offset","this","synthetic-on-update","reagent.impl.template/input-handle-change","on-change","e","var_args","G__38405","reagent.impl.template/input-render-setup","js/Error","p__38406","map__38407","jsprops","synthetic-on-change","and__4210__auto__","value","cljs.core.partial","G__38408","p1__38403#","reagent.impl.template.input_render_setup","reagent.impl.template/input-unmount","reagent.impl.template/input-component?","G__38409","reagent.impl.template/reagent-input-class","reagent.impl.template/reagent-synthetic-input-class","reagent.impl.template/input-spec","argv","comp","first-child","reagent.impl.component/*current-component*","reagent.impl.template/make-element","reagent.impl.template/synthetic-input-spec","on-update","reagent.impl.template/reagent-input","reagent.impl.component/create-class","reagent.impl.template/reagent-synthetic-input","reagent.impl.template/parse-tag","hiccup-tag","vec__38410","cljs.core.nth","tag","cljs.core/re-matches","cljs.core/next","clojure.string/replace","reagent.impl.component/comp-name","reagent.impl.template/try-get-key","e38413","reagent.impl.template/get-key","reagent.impl.template/key-from-vec","cljs.core/meta","reagent.impl.template/reag-element","c","reagent.impl.component/as-class","temp__5757__auto__","key","js/module$node_modules$react$index.createElement","G__38415","reagent.impl.template/adapt-react-class","p__38416","map__38417","synthetic-input","wrapped","G__38418","G__38419","G__38420","G__38421","reagent.impl.template.adapt_react_class","reagent.impl.template/tag-name-cache","reagent.impl.template/cached-parse","s","reagent.impl.template/native-element","parsed","first","hasprops","or__4212__auto__","G__38422","cljs.core/with-meta","reagent.impl.template/as-element","reagent.impl.template/str-coll","coll","clojure.walk/prewalk","n","reagent.impl.util/fun-name","G__38424","cljs.core.symbol","args__4824__auto__","len__4818__auto__","i__4819__auto__","argseq__4825__auto__","cljs.core/IndexedSeq","reagent.impl.template/hiccup-err","seq38425","G__38426","cljs.core/first","self__4805__auto__","msg","cljs.core/str","reagent.impl.template/vec-to-elem","reagent.impl.template.hiccup_err","pos","G__38427","cljs.core._EQ_","cljs.core.subs","cljs.core/vector?","cljs.core/seq?","reagent.impl.template/expand-seq-check","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str","reagent.impl.component/as-element","reagent.impl.template/expand-seq","a","cljs.core.into_array","n__4695__auto__","i","reagent.impl.template/expand-seq-dev","val","vec__38429","ctx","res","derefed","reagent.ratom/check-derefs","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","G__38432"],"sourcesContent":["(ns reagent.impl.template\n  (:require [react :as react]\n            [clojure.string :as string]\n            [clojure.walk :refer [prewalk]]\n            [reagent.impl.util :as util :refer [is-client]]\n            [reagent.impl.component :as comp]\n            [reagent.impl.batching :as batch]\n            [reagent.ratom :as ratom]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.debug :refer-macros [dbg prn println log dev?\n                                          warn warn-unless]]))\n\n;; From Weavejester's Hiccup, via pump:\n(def ^{:doc \"Regular expression that parses a CSS-style id and class\n             from a tag name.\"}\n  re-tag #\"([^\\s\\.#]+)(?:#([^\\s\\.#]+))?(?:\\.([^\\s#]+))?\")\n\n(deftype NativeWrapper [])\n\n\n;;; Common utilities\n\n(defn ^boolean named? [x]\n  (or (keyword? x)\n      (symbol? x)))\n\n(defn ^boolean hiccup-tag? [x]\n  (or (named? x)\n      (string? x)))\n\n(defn ^boolean valid-tag? [x]\n  (or (hiccup-tag? x)\n      (ifn? x)\n      (instance? NativeWrapper x)))\n\n\n;;; Props conversion\n\n(def prop-name-cache #js{:class \"className\"\n                         :for \"htmlFor\"\n                         :charset \"charSet\"})\n\n(defn cache-get [o k]\n  (when ^boolean (.hasOwnProperty o k)\n    (aget o k)))\n\n(defn cached-prop-name [k]\n  (if (named? k)\n    (if-some [k' (cache-get prop-name-cache (name k))]\n      k'\n      (aset prop-name-cache (name k)\n            (util/dash-to-camel k)))\n    k))\n\n(defn ^boolean js-val? [x]\n  (not (identical? \"object\" (goog/typeOf x))))\n\n(declare convert-prop-value)\n\n(defn kv-conv [o k v]\n  (doto o\n    (aset (cached-prop-name k)\n          (convert-prop-value v))))\n\n(defn convert-prop-value [x]\n  (cond (js-val? x) x\n        (named? x) (name x)\n        (map? x) (reduce-kv kv-conv #js{} x)\n        (coll? x) (clj->js x)\n        (ifn? x) (fn [& args]\n                   (apply x args))\n        :else (clj->js x)))\n\n(defn oset [o k v]\n  (doto (if (nil? o) #js{} o)\n    (aset k v)))\n\n(defn oget [o k]\n  (if (nil? o) nil (aget o k)))\n\n(defn set-id-class [p id-class]\n  (let [id ($ id-class :id)\n        p (if (and (some? id)\n                   (nil? (oget p \"id\")))\n            (oset p \"id\" id)\n            p)]\n    (if-some [class ($ id-class :className)]\n      (let [old (oget p \"className\")]\n        (oset p \"className\" (if (nil? old)\n                              class\n                              (str class \" \" old))))\n      p)))\n\n(defn stringify-class [{:keys [class] :as props}]\n  (if (coll? class)\n    (->> class\n         (filter identity)\n         (string/join \" \")\n         (assoc props :class))\n    props))\n\n(defn convert-props [props id-class]\n  (-> props\n      stringify-class\n      convert-prop-value\n      (set-id-class id-class)))\n\n;;; Specialization for input components\n\n;; This gets set from reagent.dom\n(defonce find-dom-node nil)\n\n;; <input type=\"??\" >\n;; The properites 'selectionStart' and 'selectionEnd' only exist on some inputs\n;; See: https://html.spec.whatwg.org/multipage/forms.html#do-not-apply\n(def these-inputs-have-selection-api #{\"text\" \"textarea\" \"password\" \"search\"\n                                       \"tel\" \"url\"})\n\n(defn ^boolean has-selection-api?\n  [input-type]\n  (contains? these-inputs-have-selection-api input-type))\n\n(declare input-component-set-value)\n\n(defn input-node-set-value\n  [node rendered-value dom-value component {:keys [on-write]}]\n  (if-not (and (identical? node ($ js/document :activeElement))\n            (has-selection-api? ($ node :type))\n            (string? rendered-value)\n            (string? dom-value))\n    ;; just set the value, no need to worry about a cursor\n    (do\n      ($! component :cljsDOMValue rendered-value)\n      ($! node :value rendered-value)\n      (when (fn? on-write)\n        (on-write rendered-value)))\n    \n    ;; Setting \"value\" (below) moves the cursor position to the\n    ;; end which gives the user a jarring experience.\n    ;;\n    ;; But repositioning the cursor within the text, turns out to\n    ;; be quite a challenge because changes in the text can be\n    ;; triggered by various events like:\n    ;; - a validation function rejecting a user inputted char\n    ;; - the user enters a lower case char, but is transformed to\n    ;;   upper.\n    ;; - the user selects multiple chars and deletes text\n    ;; - the user pastes in multiple chars, and some of them are\n    ;;   rejected by a validator.\n    ;; - the user selects multiple chars and then types in a\n    ;;   single new char to repalce them all.\n    ;; Coming up with a sane cursor repositioning strategy hasn't\n    ;; been easy ALTHOUGH in the end, it kinda fell out nicely,\n    ;; and it appears to sanely handle all the cases we could\n    ;; think of.\n    ;; So this is just a warning. The code below is simple\n    ;; enough, but if you are tempted to change it, be aware of\n    ;; all the scenarios you have handle.\n    (let [node-value ($ node :value)]\n      (if (not= node-value dom-value)\n        ;; IE has not notified us of the change yet, so check again later\n        (batch/do-after-render #(input-component-set-value component))\n        (let [existing-offset-from-end (- (count node-value)\n                                         ($ node :selectionStart))\n              new-cursor-offset        (- (count rendered-value)\n                                         existing-offset-from-end)]\n          ($! component :cljsDOMValue rendered-value)\n          ($! node :value rendered-value)\n          (when (fn? on-write)\n            (on-write rendered-value))\n          ($! node :selectionStart new-cursor-offset)\n          ($! node :selectionEnd new-cursor-offset))))))\n\n(defn input-component-set-value [this]\n  (when ($ this :cljsInputLive)\n    ($! this :cljsInputDirty false)\n    (let [rendered-value ($ this :cljsRenderedValue)\n          dom-value ($ this :cljsDOMValue)\n          node (find-dom-node this) ;; Default to the root node within this component\n          synthetic-on-update ($ this :cljsSyntheticOnUpdate)]\n      (when (not= rendered-value dom-value)\n        (if (fn? synthetic-on-update)\n          (synthetic-on-update input-node-set-value node rendered-value dom-value this)\n          (input-node-set-value node rendered-value dom-value this {}))))))\n\n(defn input-handle-change [this on-change e]\n  ($! this :cljsDOMValue (-> e .-target .-value))\n  ;; Make sure the input is re-rendered, in case on-change\n  ;; wants to keep the value unchanged\n  (when-not ($ this :cljsInputDirty)\n    ($! this :cljsInputDirty true)\n    (batch/do-after-render #(input-component-set-value this)))\n  (on-change e))\n\n(defn input-render-setup\n  ([this jsprops {:keys [synthetic-on-update synthetic-on-change]}]\n   ;; Don't rely on React for updating \"controlled inputs\", since it\n   ;; doesn't play well with async rendering (misses keystrokes).\n   (when (and (some? jsprops)\n           (.hasOwnProperty jsprops \"onChange\")\n           (.hasOwnProperty jsprops \"value\"))\n     (assert find-dom-node\n       \"reagent.dom needs to be loaded for controlled input to work\")\n     (when synthetic-on-update\n       ;; Pass along any synthetic input setter given\n       ($! this :cljsSyntheticOnUpdate synthetic-on-update))\n     (let [v ($ jsprops :value)\n           value (if (nil? v) \"\" v)\n           on-change ($ jsprops :onChange)\n           on-change (if synthetic-on-change\n                       (partial synthetic-on-change on-change)\n                       on-change)]\n       (when-not ($ this :cljsInputLive)\n         ;; set initial value\n         ($! this :cljsInputLive true)\n         ($! this :cljsDOMValue value))\n       ($! this :cljsRenderedValue value)\n       (js-delete jsprops \"value\")\n       (doto jsprops\n         ($! :defaultValue value)\n         ($! :onChange #(input-handle-change this on-change %))))))\n  ([this jsprops]\n   (input-render-setup this jsprops {})))\n\n(defn input-unmount [this]\n  ($! this :cljsInputLive nil))\n\n(defn ^boolean input-component? [x]\n  (case x\n    (\"input\" \"textarea\") true\n    false))\n\n(def reagent-input-class nil)\n\n(def reagent-synthetic-input-class nil)\n\n(declare make-element)\n\n(def input-spec\n  {:display-name \"ReagentInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops)\n       (make-element argv comp jsprops first-child)))})\n\n(def synthetic-input-spec\n  ;; Same as `input-spec` except it takes another argument for `input-setter`\n  {:display-name \"ReagentSyntheticInput\"\n   :component-did-update input-component-set-value\n   :component-will-unmount input-unmount\n   :reagent-render\n   (fn [on-update on-change argv comp jsprops first-child]\n     (let [this comp/*current-component*]\n       (input-render-setup this jsprops {:synthetic-on-update on-update\n                                         :synthetic-on-change on-change})\n       (make-element argv comp jsprops first-child)))})\n\n\n(defn reagent-input\n  []\n  (when (nil? reagent-input-class)\n    (set! reagent-input-class (comp/create-class input-spec)))\n  reagent-input-class)\n\n(defn reagent-synthetic-input\n  []\n  (when (nil? reagent-synthetic-input-class)\n    (set! reagent-synthetic-input-class (comp/create-class synthetic-input-spec)))\n  reagent-synthetic-input-class)\n\n\n;;; Conversion from Hiccup forms\n\n(defn parse-tag [hiccup-tag]\n  (let [[tag id class] (->> hiccup-tag name (re-matches re-tag) next)\n        class (when-not (nil? class)\n                (string/replace class #\"\\.\" \" \"))]\n    (assert tag (str \"Invalid tag: '\" hiccup-tag \"'\"\n                     (comp/comp-name)))\n    #js{:name tag\n        :id id\n        :className class}))\n\n(defn try-get-key [x]\n  ;; try catch to avoid clojurescript peculiarity with\n  ;; sorted-maps with keys that are numbers\n  (try (get x :key)\n       (catch :default e)))\n\n(defn get-key [x]\n  (when (map? x)\n    (try-get-key x)))\n\n(defn key-from-vec [v]\n  (if-some [k (-> (meta v) get-key)]\n    k\n    (-> v (nth 1 nil) get-key)))\n\n(defn reag-element [tag v]\n  (let [c (comp/as-class tag)\n        jsprops #js{:argv v}]\n    (when-some [key (key-from-vec v)]\n      ($! jsprops :key key))\n    (react/createElement c jsprops)))\n\n(defn adapt-react-class\n  ([c {:keys [synthetic-input]}]\n   (let [on-update (:on-update synthetic-input)\n         on-change (:on-change synthetic-input)]\n     (when synthetic-input\n       (assert (fn? on-update))\n       (assert (fn? on-change)))\n     (let [wrapped (doto (->NativeWrapper)\n                     ($! :name c)\n                     ($! :id nil)\n                     ($! :class nil))\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticInput true))\n                     wrapped)\n           wrapped (if synthetic-input\n                     (doto wrapped\n                       ($! :syntheticOnChange on-change))\n                     wrapped)\n           wrapped (if synthetic-input\n                     ;; This is a synthetic input component, i.e. it has a complex\n                     ;; nesting of elements such that the root node is not necessarily\n                     ;; the <input> tag we need to control, and/or it needs to execute\n                     ;; custom code when updated values are written so we provide an affordance\n                     ;; to configure a setter fn that can choose a different DOM node\n                     ;; than the root node if it wants, and can supply a function hooked\n                     ;; to value updates so it can maintain its own component state as needed.\n                     (doto wrapped\n                       ($! :syntheticOnUpdate on-update))\n                     wrapped)]\n       wrapped)))\n  ([c]\n   (adapt-react-class c {})))\n\n(def tag-name-cache #js{})\n\n(defn cached-parse [x]\n  (if-some [s (cache-get tag-name-cache x)]\n    s\n    (aset tag-name-cache x (parse-tag x))))\n\n(declare as-element)\n\n(defn native-element [parsed argv first]\n  (let [comp ($ parsed :name)\n        synthetic-input ($ parsed :syntheticInput)]\n    (let [props (nth argv first nil)\n          hasprops (or (nil? props) (map? props))\n          jsprops (convert-props (if hasprops props) parsed)\n          first-child (+ first (if hasprops 1 0))]\n      (if (or synthetic-input (input-component? comp))\n        (-> (if synthetic-input\n              ;; If we are dealing with a synthetic input, use the synthetic-input-spec form:\n              [(reagent-synthetic-input)\n               ($ parsed :syntheticOnUpdate)\n               ($ parsed :syntheticOnChange)\n               argv\n               comp\n               jsprops\n               first-child]\n              ;; Else use the regular input-spec form:\n              [(reagent-input) argv comp jsprops first-child])\n            (with-meta (meta argv))\n            as-element)\n        (let [key (-> (meta argv) get-key)\n              p (if (nil? key)\n                  jsprops\n                  (oset jsprops \"key\" key))]\n          (make-element argv comp p first-child))))))\n\n(defn str-coll [coll]\n  (if (dev?)\n    (str (prewalk (fn [x]\n                    (if (fn? x)\n                      (let [n (util/fun-name x)]\n                        (case n \"\" x (symbol n)))\n                      x)) coll))\n    (str coll)))\n\n(defn hiccup-err [v & msg]\n  (str (apply str msg) \": \" (str-coll v) \"\\n\" (comp/comp-name)))\n\n(defn vec-to-elem [v]\n  (assert (pos? (count v)) (hiccup-err v \"Hiccup form should not be empty\"))\n  (let [tag (nth v 0 nil)]\n    (assert (valid-tag? tag) (hiccup-err v \"Invalid Hiccup form\"))\n    (cond\n      (hiccup-tag? tag)\n      (let [n (name tag)\n            pos (.indexOf n \">\")]\n        (case pos\n          -1 (native-element (cached-parse n) v 1)\n          0 (let [comp (nth v 1 nil)]\n              ;; Support [:> comp ...]\n              (assert (= \">\" n) (hiccup-err v \"Invalid Hiccup tag\"))\n              (assert (or (string? comp) (fn? comp))\n                      (hiccup-err v \"Expected React component in\"))\n              (native-element #js{:name comp} v 2))\n          ;; Support extended hiccup syntax, i.e :div.bar>a.foo\n          (recur [(subs n 0 pos)\n                  (assoc v 0 (subs n (inc pos)))])))\n\n      (instance? NativeWrapper tag)\n      (native-element tag v 1)\n\n      :else (reag-element tag v))))\n\n(declare expand-seq)\n(declare expand-seq-check)\n\n(defn as-element [x]\n  (cond (js-val? x) x\n        (vector? x) (vec-to-elem x)\n        (seq? x) (if (dev?)\n                   (expand-seq-check x)\n                   (expand-seq x))\n        (named? x) (name x)\n        (satisfies? IPrintWithWriter x) (pr-str x)\n        :else x))\n\n(set! comp/as-element as-element)\n\n(defn expand-seq [s]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (aset a i (as-element (aget a i))))\n    a))\n\n(defn expand-seq-dev [s o]\n  (let [a (into-array s)]\n    (dotimes [i (alength a)]\n      (let [val (aget a i)]\n        (when (and (vector? val)\n                   (nil? (key-from-vec val)))\n          ($! o :no-key true))\n        (aset a i (as-element val))))\n    a))\n\n(defn expand-seq-check [x]\n  (let [ctx #js{}\n        [res derefed] (ratom/check-derefs #(expand-seq-dev x ctx))]\n    (when derefed\n      (warn (hiccup-err x \"Reactive deref not supported in lazy seq, \"\n                        \"it should be wrapped in doall\")))\n    (when ($ ctx :no-key)\n      (warn (hiccup-err x \"Every element in a seq should have a unique :key\")))\n    res))\n\n;; From https://github.com/babel/babel/commit/1d0e68f5a19d721fe8799b1ea331041d8bf9120e\n;; (def react-element-type (or (and (exists? js/Symbol)\n;;                                  ($ js/Symbol :for)\n;;                                  ($ js/Symbol for \"react.element\"))\n;;                             60103))\n\n;; (defn make-element-fast [argv comp jsprops first-child]\n;;   (let [key (some-> jsprops ($ :key))\n;;         ref (some-> jsprops ($ :ref))\n;;         props (if (nil? jsprops) (js-obj) jsprops)]\n;;     ($! props :children\n;;         (case (- (count argv) first-child)\n;;           0 nil\n;;           1 (as-element (nth argv first-child))\n;;           (reduce-kv (fn [a k v]\n;;                        (when (>= k first-child)\n;;                          (.push a (as-element v)))\n;;                        a)\n;;                      #js[] argv)))\n;;     (js-obj \"key\" key\n;;             \"ref\" ref\n;;             \"props\" props\n;;             \"$$typeof\" react-element-type\n;;             \"type\" comp\n;;             ;; \"_store\" (js-obj)\n;;             )))\n\n(defn make-element [argv comp jsprops first-child]\n  (case (- (count argv) first-child)\n    ;; Optimize cases of zero or one child\n    0 (react/createElement comp jsprops)\n\n    1 (react/createElement comp jsprops\n          (as-element (nth argv first-child nil)))\n\n    (.apply react/createElement nil\n            (reduce-kv (fn [a k v]\n                         (when (>= k first-child)\n                           (.push a (as-element v)))\n                         a)\n                       #js[comp jsprops] argv))))\n"]}